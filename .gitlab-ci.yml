variables:
  DEBIAN_FRONTEND: noninteractive
  APT_GET_INSTALL: "apt-get install -q -y"

stages:
  - pre
  - build
  - test
  - deploy
  - post

deploy_to_github:
  stage: pre
  image:
    # https://hub.docker.com/_/alpine
    name: alpine:latest
  script:
    - date
    - apk add --no-cache git openssh
    - echo $HOME
    - ls -lah $HOME
    - ssh-keyscan -H github.com >> ~/.ssh/known_hosts
    - echo $github_deploy_key
    - ls -lah $github_deploy_key
    - cp -p $github_deploy_key ~/.ssh/id_ed25519
    #- echo $github_deploy_key > ~/.ssh/id_ed25519
    #- chmod 600 ~/.ssh/id_ed25519
    - ls -lah ~/.ssh/
    - cat ~/.ssh/id_ed25519
    #- git push --all --prune --mirror --tags git@github.com:daniel-mohr/l.git

pre-commit:
  stage: pre
  image:
    # https://hub.docker.com/_/debian
    name: debian:latest
  script:
    - date
    - apt-get update
    - $APT_GET_INSTALL python3-pip git cargo
    - pip3 install pre-commit
    # run pre-commit
    - pre-commit --version
    - pre-commit run --all-files

pycodestyle:
  stage: pre
  image:
    # https://hub.docker.com/_/debian
    name: debian:latest
  script:
    - date
    - apt-get update
    - $APT_GET_INSTALL pycodestyle
    # check PEP 8 code style (pycodestyle was formerly called pep8)
    - pycodestyle --show-source --show-pep8 --statistics $(find -name "*.py")

pylint:
  stage: pre
  allow_failure: true
  image:
    # https://hub.docker.com/_/debian
    name: debian:latest
  script:
    - date
    - apt-get update
    - $APT_GET_INSTALL pylint python3-pytest
    # run pylint
    - pylint $(find -name "*.py")
    - echo -e "\nskipped files:"
    - echo -e "$(grep -irl skip-file *)"

.debian_based_unittest_template: &debian_based_unittest
  stage: test
  parallel:
    matrix:
      - install_method:
          - basic
          - pip
  script:
    - apt-get update
    - $APT_GET_INSTALL python3-setuptools hashdeep
    - test 'basic' = $install_method && $APT_GET_INSTALL python3-setuptools hashdeep
    - test 'pip' = $install_method && $APT_GET_INSTALL python3-setuptools python3-pip hashdeep
    - env python3 setup.py check_modules
    - test 'basic' = $install_method && python3 setup.py install
    - test 'pip' = $install_method && pip3 install .
    # run pfu
    - which pfu
    - pfu -h
    # unittest
    - env python3 setup.py run_unittest
    # install dependencies for pytest
    - $APT_GET_INSTALL python3-pytest python3-pytest-cov python3-pytest-xdist
    # pytest
    - env python3 setup.py run_pytest --parallel --coverage

ubuntu1804_unittest:
  image:
    # https://hub.docker.com/_/ubuntu
    name: ubuntu:18.04
  <<: *debian_based_unittest

ubuntu2004_unittest:
  image:
    # https://hub.docker.com/_/ubuntu
    name: ubuntu:20.04
  <<: *debian_based_unittest

ubuntu_unittest:
  image:
    # https://hub.docker.com/_/ubuntu
    name: ubuntu:latest
  <<: *debian_based_unittest

debian_unittest:
  image:
    # https://hub.docker.com/_/debian
    name: debian:latest
  <<: *debian_based_unittest

deploy_to_github:
  stage: deploy
  image:
    # https://hub.docker.com/_/debian
    name: debian:latest
  script:
    - date
    - apt-get update
    - $APT_GET_INSTALL git
    - git push --all --prune --mirror --tags git@github.com:daniel-mohr/l.git
